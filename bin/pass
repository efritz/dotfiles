#!/bin/bash

set -o errtrace
set -o nounset
set -o pipefail

doze=5
safe="${PASS_SAFE:=pass.safe}"
omit="grep --invert-match --regexp"

get_pass() {
    # Get a password from the safe and copy it to the clip board
    clip $(decrypt "${safepass}" "${safe}" | grep "${1}") || fail "Could not retrieve password"
}

clip() {
    # Set a timer for `doze` seconds for now to put junk in the clipboard
    (sleep "${doze}"; date +%s | base64 | pbcopy) 2>/dev/null & disown

    # Extract password and copy to clipboard
    echo -n "${1#*:}" | pbcopy
    tput setaf 2; echo "Password copied to clipboard - will clear in ${doze} seconds"; tput sgr0
}

add_pass() {
    if [[ -z "${2}" ]]; then
        entry=" "
    else
        entry="${1}:${2}"
    fi

    # Echo the current safe (with username omitted) and the new entry to a temporary safe

    (if [[ -f "${safe}" ]]; then
        decrypt "${safepass}" "${safe}" | ${omit} "${1}"
    fi; echo "${entry}") | ${omit} "^[[:space:]]*$" | encrypt "foobar" "${safe}.new" - || fail "Could not write to safe"

    # Overwrite old safe

    mv "${safe}.new" "${safe}"
    tput setaf 2; echo "Password added to safe"; tput sgr0
}

decrypt() {
  # Decrypt with a password.
  echo "${1}" | gpg --decrypt --armor --batch --passphrase-fd 0 "${2}" 2>/dev/null
}

encrypt() {
  # Encrypt with a password.
  gpg --symmetric --armor --batch --yes --passphrase-fd 3 --output "${2}" "${3}" 3< <(echo "${1}")
}

prompt() {
    # Ask for safe password
    read -s -p "Enter safe password: " safepass
    echo ""
}

fail() {
    # Print error message and exit
    tput setaf 1; echo "Error: ${1}"; tput sgr0
    exit 1
}

# Sanity check
if [[ -z gpg && ! -x gpg ]]; then
    fail "GnuPG is not available"
fi

action="${1:-all}"

# List all passwords
if [[ "${action}" == "all" ]]; then
    prompt
    decrypt "${safepass}" "${safe}"
fi

# Copy a particular password
if [[ "${action}" == "get" ]]; then
    if [[ -z "${2:-}" ]]; then
        fail "Expected a username"
    fi

    prompt
    get_pass "${2}"
fi

# Add/Update/Delete password
if [[ "${action}" == "add" ]]; then
    if [[ -z "${2:-}" ]]; then
        fail "Expected a username"
    fi

    prompt
    add_pass "${2}" "${3:-}"
fi
